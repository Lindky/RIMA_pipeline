#!/usr/bin/env python

#-------------------------------


def immune_response_input(wildcards):
    meta_file = "analysis/batchremoval/tide/tide_meta.txt"
    f = pd.read_csv(meta_file, index_col=0, sep=',')
    boolean_finding = f['Timing'].str.contains('Pre').any()
    if boolean_finding:
        print("Pre-treatment samples detected in the dataset using pre-treatment mode")
        return ["analysis/batchremoval/tide/tideinput.pre.txt",
                "analysis/batchremoval/tide/tideinput.others.txt"]
    else:
        print("No Pre-treatment detected, running tidepy using default mode")
        return ["analysis/batchremoval/tide/tpm_convertID_batch_Entrez.txt",
                "analysis/batchremoval/tide/tpm_convertID_batch_Entrez.txt",
                "analysis/batchremoval/tide/tpm_convertID_batch_Entrez.txt"]

def msisensor_input(wildcards):
    ls=[]
    for run in config["runs"]:
        ls.append("analysis/msisensor/single/%s/%s_msisensor" % (run, run))
    return ls

def get_runs_tumor(wildcards):
    ls = []
    for run in config["runs"]:
        ls.append(config["runs"][run][0])
    return ls

def immune_response_cohort_targets(wildcards):
    ls = []
    ls.append("analysis/tide/tpm_convertID_batch_tide_score.txt")
    ls.append("files/multiqc/immune_response/TIDE-TCGA_mqc.png")
    #ls.append("files/multiqc/immune_response/tide_score_mqc.png")
    ls.append("files/multiqc/immune_response/msi_score.txt")
    ls.append("files/multiqc/immune_response/MSISensor.png")
    ls.append("files/multiqc/immune_response/msi_score_comparison.png")
#    if config['control']:
#        ls.append("analysis/tide/tpm_convertID_batch_Entrez_normalize_control.txt")
    return ls

rule immune_response_cohort_all:
    input:
        immune_response_cohort_targets

#------------------------TIDEpy rules-----------------------------#
rule immune_response_score:
    input:
        immune_response_input
    output:
        "analysis/tide/tpm_convertID_batch_tide_score.txt"
    message:
        "Running TIDEpy"
    benchmark:
        "benchmarks/immune_response/tide_score.benchmark"
    log:
        "logs/immune_response/tide_score.log"
    params:
        pre = lambda wildcards,input: input[0],
        post = lambda wildcards,input: input[1],
#        length = len(input),
#        meta_info = config["metasheet"],
        pre_outdir = "analysis/tide/pre_tpm_convertID_batch_tide_score.txt",
        post_outdir = "analysis/tide/post_tpm_convertID_batch_tide_score.txt",
        outdir = "analysis/tide/tpm_convertID_batch_tide_score.txt",
        cancer = config["tide_cancer"],
#        run_normalization = normalization
    # conda: "../envs/py3_env.yml"
    run:
        if len(input) == 2:
            shell("""tidepy {params.pre} -o {params.pre_outdir} -c {params.cancer} """
            """ && tidepy {params.post} -o {params.post_outdir} -c {params.cancer}  --pretreat"""
            """ && awk 'FNR>1 || NR==1' analysis/tide/*_tide_score.txt > analysis/tide/tpm_convertID_batch_tide_score.txt """)
        else:
            shell("""tidepy {params.pre} -o {params.outdir} -c {params.cancer} """)


rule immune_response_plot:
    input:
        score="analysis/tide/tpm_convertID_batch_tide_score.txt",
        expr ="analysis/batchremoval/tide/tpm_convertID_batch_Entrez.txt"
    output:
        "files/multiqc/immune_response/TIDE-TCGA_mqc.png",
        #"files/multiqc/immune_response/tide_score_.png"
    message:
        "plot on tide score"
    benchmark:
        "benchmarks/immune_response/tide_plot.benchmark"
    log:
        "logs/immune_response/tide_plot.log"
    params:
        cancer = config["cancer_type"],
        outpath = "files/multiqc/immune_response/",
        path="set +eu;source activate %s" % config['stat_root']
    conda:
        "../envs/stat_perl_r.yml"
    shell:
        "{params.path}; Rscript src/immune_response/tide_plot.R --input {input.score} -e {input.expr} --cc {params.cancer} --outdir {params.outpath}"

#---------------------------MSIsensor2 rules-----------------------#
rule msisensor_plot:
    input:
        msisensor_input
    output:
        msi_score = "files/multiqc/immune_response/msi_score.txt",
        msi_density = "files/multiqc/immune_response/MSISensor.png",
        msi_comparison = "files/multiqc/immune_response/msi_score_comparison.png"
    log:
        "analysis/variant/variant_missensor.log"
    message:
        "Running msisensor ploting"
    benchmark:
        "benchmarks/immune_response/msi_plot.benchmark"
    conda: "../envs/stat_perl_r.yml"
    params:
        outpath = "files/multiqc/immune_response/",
        run = get_runs_tumor,
        phenotype = lambda wildcards: ','.join(str(i) for i in config["msi_clinical_phenotypes"]),
        meta = config["metasheet"],
        path="set +eu;source activate %s" % config['stat_root'],
    shell:
        "cat {input} | sed '/Total_Number_of_Sites/d' |  awk FS='\t' '{{print $3}}'  > pmt " 
        """&&  echo {params.run}| xargs -n1 | paste - pmt > {output.msi_score}"""
        """&& rm pmt """
        """&& {params.path};Rscript src/immune_response/msi_plot.R --msiscore {output.msi_score}  --outdir {params.outpath} --phenotype {params.phenotype} --meta {params.meta}"""
