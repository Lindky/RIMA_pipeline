suppressMessages(library(optparse))
suppressMessages(library(dplyr))
suppressMessages(library(stringr))

###make option list and parse command line
option_list <- list(
  make_option(c("-m", "--meta"), type="character", 
              help="meta information"),
  make_option(c("-s","--star"), type = "character",
              help = "status of each samples calculated by star"),
  make_option(c("-d","--distrib"), type = "character",
              help = "read distribution from rseqc"),
  make_option(c("-t","--tin"), type = "character",
              help = "tin score from rseqc"),
  make_option(c("-o","--output"), type = "character",
              help = "output path")
)
opt_parser <- OptionParser(option_list = option_list);
opt <- parse_args(opt_parser);

#read the data
star.reads <- read.table(opt$star, sep=",", header=T, as.is=T)
rseqc.reads <- read.delim(opt$distrib, sep="\t", header=T, as.is=T)
tin.data <- read.table(opt$tin, sep="\t", header=T, as.is=T)
meta <- read.table(opt$meta, sep = ",", header = T)
output <- opt$output

############### total mapped reads : 20 M 
star_cut_reads= as.data.frame(t(star.reads),stringsAsFactors=FALSE)
star_final=as.data.frame(star_cut_reads[,c(1,4)])
names(star_final)=c("Total_Reads","Unique_Mapping")
star_final<- star_final[-1, ]
star_final$Total_Reads_QC_check <- ifelse(star_final$Total_Reads >= 2000000, "PASS", "FAIL")
star_final$Unique_Mapping_QC_check <- ifelse(star_final$Unique_Mapping >=80 , "PASS", "FAIL")
star_final$Sample_Name<- rownames(star_final)
star_final$Total_Reads <- as.numeric(star_final$Total_Reads)/1000000
star_final$Unique_Mapping<- gsub("%","", star_final$Unique_Mapping)
print(star_final)
############################ tin reads
tin.data$tin_QC_check <- ifelse(tin.data$TIN.median. >=30, "PASS", "FAIL")
tin.data$Bam_file=str_remove_all(tin.data$Bam_file, "[_downsampling.bam]")
names(tin.data)=c("Sample_Name","mean_TIN","median_TIN","stdev_TIN","tin_QC_check")
tin_final=tin.data[,c(1,3,5)]
print(tin_final)

###################rseqc reads
rseqc_reads= as.data.frame(t(rseqc.reads),stringsAsFactors=FALSE)
colnames(rseqc_reads) <- rseqc_reads[1,]
rseqc_reads<- rseqc_reads[-1, ]
rseqc_reads$Sample_Name<- rownames(rseqc_reads)
#rseqc_reads$Sample_Name <- gsub("\\.", "-", rseqc_reads$Sample_Name)
rseqc_reads$CDR_QC_check <- ifelse(rseqc_reads$CDS_Exons >= 0.50 , "PASS", "FAIL")
rseqc_reads$CDS_Exons <- as.numeric(rseqc_reads$CDS_Exons) * 100
print(rseqc_reads)

####################
m=Reduce(merge, list(star_final,tin_final,rseqc_reads))
m1= m %>%
  dplyr::select(Sample_Name, Total_Reads, Unique_Mapping, median_TIN, CDS_Exons,Total_Reads_QC_check,Unique_Mapping_QC_check,tin_QC_check,CDR_QC_check)
colnames(m1)[2] = "Total_Reads(M)"
colnames(m1)[3] = "Unique_Mapping(%)"
colnames(m1)[5] = "CDS_Exons(%)"
write.table(m1, file=paste(output,"QC_status.txt", sep = ""),sep="\t", quote=FALSE, row.names=FALSE)
write.csv(meta, file=paste(output,"meta_information.csv", sep = ""), quote=FALSE, row.names=FALSE)


